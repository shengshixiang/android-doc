# pci 要求 apk文件验签不过,要删除

pci新增要求,再sdcard/目录下的apk文件,如果验签不过,需要删除

# Log

```
04-18 01:19:24.587  1346  2450 I ActivityTaskManager: START u0 {act=android.intent.action.VIEW dat=content://com.android.externalstorage.documents/document/primary:opssl_test_sig_sign.apk typ=application/vnd.android.package-archive flg=0x20000003 cmp=com.android.packageinstaller/.InstallStart} from uid 10033
```

默认从log可以看出,只有在```QSSI.12/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java```文件里面,

```executeRequest```函数里面附带有原生的apk路径信息

所以可以在executeRequest函数里面做文章,跟 之前处理html文件是一样的.

在packageInstaller,或者pms 里面,安装的apk已经被重新复制了一份,达不到删除原有文件的目的

```
private int executeRequest(Request request) {
        final int userId = aInfo != null && aInfo.applicationInfo != null
                ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;
        if (err == ActivityManager.START_SUCCESS) {
            Slog.i(TAG, "START u" + userId + " {" + intent.toShortString(true, true, true, false)
                    + "} from uid " + callingUid);
        }
        ActivityRecord sourceRecord = null;
}
```

#  修改方法

在START U0之前 加入如下代码

可以通过CHECK_APK 定义 true或者false,控制是否验签.apk

```getFilePathByUri```作用 是通过uri获取绝对路径,```content://com.android.externalstorage.documents/document/primary:opssl_test_sig_sign.apk```获取到```/storage/emulated/0/opssl_test_sig_sign.apk```


```
private int executeRequest(Request request) {
if (SECURITY_PCI && aInfo != null && isNeedCheckPackageName(aInfo.applicationInfo.packageName)) {
        Uri uri = intent.getData();
        String fileName = getFilePathByUri(mService.mContext, uri);
        if (uri != null && fileName != null && isCheckFile(fileName)) {
            if (0 != verifyFile(fileName)) {
                File tempFile = new File(fileName);
                if(tempFile.exists()){
                    tempFile.delete();
                }
                return START_ABORTED;
            }
        }
    }
    final int userId = aInfo != null && aInfo.applicationInfo != null
            ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;
    if (err == ActivityManager.START_SUCCESS) {
        Slog.i(TAG, "START u" + userId + " {" + intent.toShortString(true, true, true, false)
                + "} from uid " + callingUid);
    }
}

private boolean isNeedCheckPackageName(String packageName){
    if ("com.android.htmlviewer".equals(packageName)){
        return true;
    }else if(CHECK_APK && "com.android.packageinstaller".equals(packageName)){
        return true;
    }
    return false;
}

private String getFilePathByUri(Context context, Uri uri) {
        String path = null;
        Slog.w("lanxq","uri.getScheme = " + uri.getScheme());
        if (ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {
            if (DocumentsContract.isDocumentUri(context, uri)) {
                Slog.w("lanxq","uri.getAuthority = " + uri.getAuthority());
                if (isExternalStorageDocument(uri)) {
                    // ExternalStorageProvider
                    final String docId = DocumentsContract.getDocumentId(uri);
                    final String[] split = docId.split(":");
                    final String type = split[0];
                    Slog.w("lanxq","type = " + type);
                    if ("primary".equalsIgnoreCase(type)) {
                        Environment.setUserRequired(false);
                        path = Environment.getExternalStorageDirectory() + "/" + split[1];
                        return path;
                    }
                } else if (isDownloadsDocument(uri)) {
                    // DownloadsProvider
                    final String id = DocumentsContract.getDocumentId(uri);
                    Slog.w("lanxq","isDownloadsDocument id = " + id);
                    final Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/my_downloads"),
                            Long.valueOf(id));
                    Slog.w("lanxq","isDownloadsDocument contentUri = " + contentUri.toString());
                    path = getDataColumn(context, contentUri, null, null);
                    return path;
                } else if (isMediaDocument(uri)) {
                    // MediaProvider
                    final String docId = DocumentsContract.getDocumentId(uri);
                    final String[] split = docId.split(":");
                    Slog.w("lanxq","isMediaDocument split[0] = " + split[0]+",split[1] = "+split[1]);
                    final String type = split[0];
                    Uri contentUri = null;
                    if ("image".equals(type)) {
                        contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                    } else if ("video".equals(type)) {
                        contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                    } else if ("audio".equals(type)) {
                        contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                    }else if ("document".equals(type)) {
                        contentUri = Uri.parse("content://media").buildUpon().appendPath("external").appendPath("file").build();
                    }
                    if(contentUri == null){
                        Slog.w("lanxq","isMediaDocument return null, contentUri = null ");
                        return null;
                    }
                    Slog.w("lanxq","isMediaDocument contentUri = " + contentUri.toString());
                    final String selection = "_id=?";
                    final String[] selectionArgs = new String[]{split[1]};
                    path = getDataColumn(context, contentUri, selection, selectionArgs);
                    return path;
                }
            }
        }else {
            // 以 file:// 开头的
            if (ContentResolver.SCHEME_FILE.equals(uri.getScheme())) {
                path = uri.getPath();
                return path;
            }
        }
        return null;
    }
private boolean isExternalStorageDocument(Uri uri) {
    return "com.android.externalstorage.documents".equals(uri.getAuthority());
}
private boolean isCheckFile(String fileName) {
    final String[] split = fileName.split("\\.");
    final String type = split[split.length-1];
    Slog.w(TAG,"isCheckFile fileName " + fileName);
    if ("HTML".equalsIgnoreCase(type) || "HTM".equalsIgnoreCase(type)) {
        return true;
    }else if(CHECK_APK && "apk".equalsIgnoreCase(type)){
        return true;
    }
    return false;
}
```

* 添加删除文件权限

```
+++ b/QSSI.12/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java
@@ -785,17 +785,19 @@ public class ZygoteInit {
         capabilities &= ((long) data[0].effective) | (((long) data[1].effective) << 32);
 
         /* Hardcoded command line to start the system server */
+//[feature]-add-begin starmenxie@hotmail.com,20230410,for pci ask,delete sdcard file
         String[] args = {
                 "--setuid=1000",
                 "--setgid=1000",
                 "--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,"
-                        + "1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011",
+                        + "1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011,9997",
                 "--capabilities=" + capabilities + "," + capabilities,
                 "--nice-name=system_server",
                 "--runtime-args",
                 "--target-sdk-version=" + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,
                 "com.android.server.SystemServer",
         };
+//[feature]-add-end starmenxie@hotmail.com,20230410,for pci ask,delete sdcard file
         ZygoteArguments parsedArgs;
```

# 总结

这个```final Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/my_downloads"),Long.valueOf(id));```

uri,content://downloads/my_downloads,需要看看代码,```QSSI.12/packages/providers/DownloadProvider/src/com/android/providers/downloads/DownloadProvider.java```

```public Uri insert(final Uri uri, final ContentValues values) {```

insert函数最后一句,

```return ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI, rowID);```

* QSSI.12/frameworks/base/core/java/android/provider/Downloads.java

```
/** 
    * The content:// URI to access downloads owned by the caller's UID.
    */
@UnsupportedAppUsage
public static final Uri CONTENT_URI =
        Uri.parse("content://downloads/my_downloads");
```

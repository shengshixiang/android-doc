# README

pax机器,都是从sp读取配置文件的mainboard,portboard版本号,然后匹配dtb然后开机.

有时候调试需要禁用sp,就读取不到版本号,匹配不了dtb的版本号,导致无法开机,开始fastboot

# 固定dtb版本号的方法

以A6650为例,介绍固定配置文件版本号方法

```
commit aac6fb04292dc52014c1b76178e52a933480eb23
Author: xielianxiong <xielianxiong@paxsz.com>
Date:   Sat Feb 11 16:31:24 2023 +0800

    temp,固定匹配 v02,v03 dtb,避免去掉sp 起不来,定在bootloader

diff --git a/UM.9.15/bootable/bootloader/edk2/QcomModulePkg/Library/BootLib/LocateDeviceTree.c b/UM.9.15/bootable/bootloader/edk2/QcomModulePkg/Library/BootLib/LocateDeviceTree.c
index f74225ed56a..0c20cfc14fa 100755
--- a/UM.9.15/bootable/bootloader/edk2/QcomModulePkg/Library/BootLib/LocateDeviceTree.c
+++ b/UM.9.15/bootable/bootloader/edk2/QcomModulePkg/Library/BootLib/LocateDeviceTree.c
@@ -766,6 +766,7 @@ STATIC EFI_STATUS GetBoardMatchDtb (DtInfo *CurDtbInfo,
 }
 
 //[FEATURE]-Add-BEGIN by shanliangliang@paxsz.com, 2021/12/22 for multi pax project dts compatible
+#define MAX_BOARDINFO_SIZE 32
 STATIC EFI_STATUS GetPaxBoardInfoMatchDtb(DtInfo * CurDtbInfo)
 {
   VOID *Dtb;
@@ -779,8 +780,9 @@ STATIC EFI_STATUS GetPaxBoardInfoMatchDtb(DtInfo * CurDtbInfo)
   CHAR8 MainBoard[MAX_BOARDINFO_SIZE] = {0};
   CHAR8 PortBoard[MAX_BOARDINFO_SIZE] = {0};;
   CHAR8 TerminalName[MAX_BOARDINFO_SIZE] = {0};;
-  CHAR8 Buff[MAX_BOARDINFO_SIZE] = {0};
-
+  CHAR8 Buff[MAX_BOARDINFO_SIZE] = {"A6650"};
+  CHAR8 Buff_MainBoard[MAX_BOARDINFO_SIZE] = {"V02"};
+  CHAR8 Buff_PortBoard[MAX_BOARDINFO_SIZE] = {"V03"};
   if ((CurDtbInfo == NULL) || !(Dtb = CurDtbInfo->Dtb)) {
     DEBUG ((EFI_D_ERROR, "CurDtbInfo Or Dtb is NULL\n"));
     return EFI_INVALID_PARAMETER;
@@ -813,41 +815,41 @@ STATIC EFI_STATUS GetPaxBoardInfoMatchDtb(DtInfo * CurDtbInfo)
          AsciiStrnCpyS(TerminalName, (sizeof (CHAR8) * TerminalNamePropLen), TerminalNameProp, TerminalNamePropLen);
          DEBUG ((EFI_D_ERROR, "Get Pax Board info from dts [%a:%a:%a].\n", MainBoard, PortBoard, TerminalName));

-         SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
-         if (getCfgTermialName(Buff) < 0) {
-                 DEBUG ((EFI_D_ERROR, "Get Pax TERMINAL_NAME Failed.\n"));
-                 return EFI_UNSUPPORTED;
-         }
-         else {
+         //SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
+         //if (getCfgTermialName(Buff) < 0) {
+                // DEBUG ((EFI_D_ERROR, "Get Pax TERMINAL_NAME Failed.\n"));
+                 //return EFI_UNSUPPORTED;
+         //}
+         //else {
                  if (AsciiStrnCmp(Buff, TerminalName, TerminalNamePropLen)) {
                          DEBUG ((EFI_D_ERROR, "Cmp Pax TERMINAL_NAME Failed[%a:%a].\n", Buff, TerminalName));
                          return EFI_NOT_FOUND;
                  }
-         }
-
-         SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
-         if (getCfgMainBoard(Buff) < 0) {
-                 DEBUG ((EFI_D_ERROR, "Get Pax MAIN_BOARD Failed.\n"));
-                 return EFI_UNSUPPORTED;
-         }
-         else {
-                 if (AsciiStrnCmp(Buff, MainBoard, MainBoardPropLen)) {
+         //}
+
+         //SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
+         //if (getCfgMainBoard(Buff) < 0) {
+                 //DEBUG ((EFI_D_ERROR, "Get Pax MAIN_BOARD Failed.\n"));
+                 //return EFI_UNSUPPORTED;
+         //}
+         //else {
+                 if (AsciiStrnCmp(Buff_MainBoard, MainBoard, MainBoardPropLen)) {
                          DEBUG ((EFI_D_ERROR, "Cmp Pax MAIN_BOARD Failed[%a:%a].\n", Buff, MainBoard));
                          return EFI_NOT_FOUND;
                  }
-         }
-
-         SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
-         if (getCfgPortBoard(Buff) < 0) {
-                 DEBUG ((EFI_D_ERROR, "Get Pax PORT_BOARD Failed.\n"));
-                 return EFI_UNSUPPORTED;
-         }
-         else {
-                 if (AsciiStrnCmp(Buff, PortBoard, PortBoardPropLen)) {
+         //}
+
+         //SetMem((VOID *)Buff, MAX_BOARDINFO_SIZE, 0);
+         //if (getCfgPortBoard(Buff) < 0) {
+                 //DEBUG ((EFI_D_ERROR, "Get Pax PORT_BOARD Failed.\n"));
+                 //return EFI_UNSUPPORTED;
+         //}
+         //else {
+                 if (AsciiStrnCmp(Buff_PortBoard, PortBoard, PortBoardPropLen)) {
                          DEBUG ((EFI_D_ERROR, "Cmp Pax PORT_BOARD Failed[%a:%a].\n", Buff, PortBoard));
                          return EFI_NOT_FOUND;
                  }
-         }
+         //}
 
          DEBUG ((EFI_D_ERROR, "Get Pax Board info success[%a:%a:%a].\n", MainBoard, PortBoard, TerminalName));
          CurDtbInfo->DtMatchVal |= BIT(PAX_BOARD_INFO_MATCH);
```